## handy ---------------------------------------------------------------------

# comment
snippet b-comm "+ inline comment" w
/* ${1:title/name}:
 *
 * ${2:brief}
 */
endsnippet

# comment
snippet i-comm "+ inline comment" w
/* ${1} */
endsnippet

# todo
snippet todo "+ todo" w
/* todo: ${1}
 * date: `!v strftime("%Y-%m-%d %H:%M")`
 */
endsnippet

# cite source
snippet ref "+ ref" w
/* ${1:brief} see:
 * $2
 * date: `!v strftime("%Y-%m-%d %H:%M")`
 */
endsnippet


## glog ----------------------------------------------------------------------
# include google logger
snippet glog "+ google logger" w
#include <glog/logging.h>
endsnippet

# include google logger
snippet init-glog "+ init glog" w
google::InitGoogleLogging(argv[0]);
endsnippet

# glog info
snippet info "+ glog info" w
LOG(INFO) << ;
endsnippet

# glog warning
snippet warning "+ glog warning" w
LOG(WARNING) << ;
endsnippet

# glog error
snippet error "+ glog error" w
LOG(ERROR) << ;
endsnippet

# glog fatal
snippet fatal "+ glog fatal" w
LOG(FATAL) << ;
endsnippet

# glog dfatal
snippet dfatal "+ glog dfatal" w
LOG(DFATAL) << ;
endsnippet


## symbol definition ---------------------------------------------------------
# add class
snippet class " + .h class" b
class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3
public:
	$1();
	~$1();
};
endsnippet

snippet printvec "→ print vec" b
std::cout << "[ ";
for (const auto& i = ${1:vec}.begin(); i != $1.end(); ++i)
std::cout << *i << " ";
std::cout << "]" << std::endl;
endsnippet

snippet ss "→ std::string" w
std::string
endsnippet

snippet sv "→ std::vector" w
std::vector<$1>
endsnippet

snippet sa "→ std::array" w
std::array<$1>
endsnippet

snippet si "→ std::stoi" w
std::stoi($1)
endsnippet

snippet sl "→ std::stol" w
std::stol($1)
endsnippet

snippet sm "→ std::map" w
std::unordered_map<>
endsnippet

snippet fo "→ for loop" b
for (int ${1:i} = 0; $1 < ${2:count}; ++$1) {
}
endsnippet

snippet efo "→ for loop" b
for (const auto& ${1:i}: ${2:container}) {
}
endsnippet

snippet "read num" "→ std::cin int" w
// stdin int
//
int num;
std::cin >> num;
std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
endsnippet

snippet "read str" "→ std::cin string" w
// stdin string
//
std::string temp_str;
getline(std::cin, temp_str);
endsnippet

snippet "func doc" "→ function doc" w
/**
 * ${1:func}
 *     ${2:brief}
 * @param ${3:param}
 *     ${4:brief}
 * @return ${5:val}
 *     ${6:brief}
 */
endsnippet
