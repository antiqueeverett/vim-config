# COMMENTING:
snippet todo "→ todo" w
/**
 * todo: ${1}
 * date: `!v strftime("%Y-%m-%d %H:%M")`
 */
endsnippet


snippet ref "→ reference" w
/**
 * $1
 * see:
 * $2
 * date: `!v strftime("%Y-%m-%d %H:%M")`
 */
endsnippet


snippet "fdoc" "→ function doc" w
/**
 * ${1:function}
 *   ${2:One line description}
 *
 * @param ${3}
 *   ${4:Description of parameter foo including valid range and (any) error checking.}
 *
 * @retval ${5}
 *   ${6: Description of return value of this method.}
 */
endsnippet


snippet "cdoc" "→ class doc" w
/**
 * @file capture.h:
 *    Image capture from a kinect device.
 *
 * @b Description
 *    Captures rgb, point cloud, and depth data,
 *    providing an interface for these captures.
 *
 * @b Rationale
 *    The Capture Class abstracts and simplifies
 *    interface to captured image data. It also
 *    centralizes encapsulates the core kinect
 *    device operations.
 *
 * @b Resource
 *    Implementation base on example provided
 *    in Azure-Kinect-Sensor-SDK doc:
 *    https://github.com/microsoft//tree/develop/examples/fastpointcloud
 *
 * @b Notes
 *    Last major revision date: `!v strftime("%Y-%m-%d %H:%M")`
 *    @version: 1.1
 *    @author : Everett M.
 */
endsnippet

snippet "bdoc" "→ block comment doc" w
/** ${1:Sysntax}:
 *   ${2:Block description.}
 */

endsnippet


# GLOG:
snippet glog "+ google logger" w
#include <glog/logging.h>
#include <gflags/gflags.h>
endsnippet

snippet init-glog "+ init glog" w
google::InitGoogleLogging(argv[0]);
endsnippet

snippet info "+ glog info" w
LOG(INFO) << $1 ;
endsnippet

snippet warn "+ glog warning" w
LOG(WARNING) << $1 ;
endsnippet

snippet err "+ glog error" w
LOG(ERROR) << $1 ;
endsnippet

snippet fatal "+ glog fatal" w
LOG(FATAL) << $1 ;
endsnippet

snippet dfatal "+ glog dfatal" w
LOG(DFATAL) << $1 ;
endsnippet


# INCLUDES:
snippet "i vector" "→ #include <vector> " w
#include <vector>
endsnippet

snippet "i iostream" "→ #include <iostream> " w
#include <iostream>
endsnippet

snippet "i array" "→ #include <array> " w
#include <array>
endsnippet

snippet "i glog" "→ #include <glog/logging.h> " w
#include <gflags/gflags.h>
#include <glog/logging.h>
endsnippet

snippet "i cmath" "→ #include <cmath>" w
#include <cmath>
endsnippet

snippet "i exception" "→ #include <exception>" w
#include <exception>
endsnippet

snippet "i map" "→ #include <unordered_map>" w
#include <unordered_map>
endsnippet

snippet "i stack" "→ #include <stack>" w
#include <stack>
endsnippet

snippet "i algorithm" "→ #include <algorithm>" w
#include <algorithm>
endsnippet

snippet "i utility" "→ #include <utility>" w
#include <utility>
endsnippet

snippet "i eigen" "→ #include <Eigen/Dense>" w
#include <Eigen/Dense>
endsnippet

snippet "i eigen" "→ #include <Eigen/Dense>" w
#include <Eigen/Dense>
endsnippet

snippet "i string" "→ #include <string>" w
#include <string>
endsnippet

snippet "i fstream" "→ #include <fstream>" w
#include <fstream>
endsnippet

snippet "i future" "→ #include <future>" w
#include <future>
endsnippet

snippet "i memory" "→ #include <memory>" w
#include <memory>
endsnippet

snippet "i utility" "→ #include <utility>" w
#include <utility>
endsnippet

snippet "i logger" "→ #include 'logger.h'" w
#include "logger.h"
endsnippet

snippet "i point" "→ #include 'point.h'" w
#include "point.h"
endsnippet

snippet "i point3d" "→ #include 'point3d.h'" w
#include "point3d.h"
endsnippet

snippet "i timer" "→ #include 'timer.h'" w
#include "timer.h"
endsnippet

snippet "i io" "→ #include 'io.h'" w
#include "io.h"
endsnippet


snippet "to string" "→ to_string()" w
std::to_string($1)
endsnippet

snippet "to integer" "→ std::stoi" w
std::stoi($1)
endsnippet

snippet array "→ std::array" w
std::array<$1>
endsnippet

snippet future "→ std::future" w
std::future<$1>
endsnippet

snippet "string" "→ std::string" w
std::string
endsnippet

snippet vector "→ std::vector" w
std::vector<$1>
endsnippet

snippet map "→ std::map" w
std::unordered_map<>
endsnippet

snippet stack "→ std::stack" w
std::stack<$1>
endsnippet

snippet stol "→ std::stol" w
std::stol($1)
endsnippet

snippet shared "→ std::std::shared_ptr" w
std::shared_ptr<$1>
endsnippet


# DATA STRUCTURES:
snippet class " + .h class" b
#ifndef $1_H
#define $1_H

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {

private:

public:
    $1();
};
#endif /* $1_H */
endsnippet

# HANDY:
snippet fori "→ for loop" b
for (int ${1:i} = 0; $1 < ${2:size}; ++$1) {
}
endsnippet

snippet for "→ for loop" b
for (auto $1: $2) {
}
endsnippet

snippet readint "→ std::cin int" w
int n;
std::cin >> n;
std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
endsnippet

snippet readstr "→ std::cin string" w
std::string str;
getline(std::cin, str);
endsnippet

snippet "hello world" "→ template main.cpp" w
#include <glog/logging.h>
#include <gflags/gflags.h>

#include <iostream>
void initLogger(int& argc, char* argv[])
{
    google::ParseCommandLineFlags(&argc, &argv, true);
    google::InitGoogleLogging(argv[0]);
    google::SetLogDestination(google::GLOG_INFO, "Log.txt");
    LOG(INFO) << "Logger successfully initialized";
}

int main(int argc, char* argv[])
{
    initLogger(argc, argv);

    LOG(INFO) << "Hello world";
    std::cin.ignore();
    return 0;
}
endsnippet
