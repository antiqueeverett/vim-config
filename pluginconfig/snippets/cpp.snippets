###############################################################################
# COMMENTING:
###############################################################################
snippet todo "→ todo" w
/**
 * todo: ${1}
 * date: `!v strftime("%Y-%m-%d %H:%M")`
 */
endsnippet

snippet note "→ note" w
/**
 * $1
 * see:$2
 * date: `!v strftime("%Y-%m-%d %H:%M")`
 */
endsnippet

snippet "fdoc" "→ function doc" w
/**
 * ${1:function}:
 *   ${2:One line description}
 *
 * @param ${3}
 *   ${4:Description of parameter foo including valid range and (any) error checking.}
 *
 * @retval ${5}
 *   ${6: Description of return value of this method.}
 */
endsnippet

snippet "cdoc" "→ class doc" w
/**
 * @file capture.h:
 *    Image capture from a kinect device.
 *
 * @b Description
 *    Captures rgb, point cloud, and depth data,
 *    providing an interface for these captures.
 *
 * @b Rationale
 *    The Capture Class abstracts and simplifies
 *    interface to captured image data. It also
 *    centralizes encapsulates the core kinect
 *    device operations.
 *
 * @b Resource
 *    Implementation base on example provided
 *    in Azure-Kinect-Sensor-SDK doc:
 *    https://github.com/microsoft//tree/develop/examples/fastpointcloud
 *
 * @b Notes
 *    Last major revision date: `!v strftime("%Y-%m-%d %H:%M")`
 *    @version: 1.1
 *    @author : Everett M.
 */
endsnippet

snippet "bdoc" "→ block comment doc" w
/** ${1:Sysntax}:
 *   ${2:Block description.}
 */

endsnippet




###############################################################################
# GLOG:
###############################################################################
snippet glog "+ google logger" w
#include <glog/logging.h>
#include <gflags/gflags.h>
endsnippet

snippet init-glog "+ init glog" w
google::InitGoogleLogging(argv[0]);
endsnippet

snippet info "+ glog info" w
LOG(INFO) << $1 ;
endsnippet

snippet warn "+ glog warning" w
LOG(WARNING) << $1 ;
endsnippet

snippet err "+ glog error" w
LOG(ERROR) << $1 ;
endsnippet

snippet fatal "+ glog fatal" w
LOG(FATAL) << $1 ;
endsnippet

snippet dfatal "+ glog dfatal" w
LOG(DFATAL) << $1 ;
endsnippet


###############################################################################
# INCLUDES:
###############################################################################
snippet "inc vec" "→ #include <vector> " w
#include <vector>
endsnippet

snippet "inc io" "→ #include <iostream> " w
#include <iostream>
endsnippet

snippet "inc arr" "→ #include <array> " w
#include <array>
endsnippet

snippet "inc glog" "→ #include google logging " w
#include <gflags/gflags.h>
#include <glog/logging.h>
endsnippet

snippet "inc math" "→ #include <cmath>" w
#include <cmath>
endsnippet

snippet "inc exce" "→ #include <exception>" w
#include <exception>
endsnippet

snippet "inc map" "→ #include <unordered_map>" w
#include <unordered_map>
endsnippet

snippet "inc stack" "→ #include <stack>" w
#include <stack>
endsnippet


###############################################################################
# STD:
###############################################################################
snippet stos "→ to_string()" w
std::to_string($1)
endsnippet

snippet stoi "→ std::stoi" w
std::stoi($1)
endsnippet

snippet sa "→ std::array" w
std::array<$1
endsnippet

snippet ss "→ std::string" w
std::string
endsnippet

snippet sv "→ std::vector" w
std::vector<$1
endsnippet

snippet sm "→ std::map" w
std::unordered_map<>
endsnippet

snippet sstack "→ std::stack" w
std::stack<$1
endsnippet

snippet sl "→ std::stol" w
std::stol($1)
endsnippet


###############################################################################
# CODE:
###############################################################################
snippet class " + .h class" b
#ifndef $1_H
#define $1_H
#define ${1/.*/\u$0/}

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {

private:
    int m_someval;

public:
    // Default constructor
    //
    $1();

    // Point Constructor
    //
    explicit $1(const int& t_someval)
        : m_someval(t_someval)
    {
    }

    // Copy constructor
    //
    $1(const $1& t_$1) { m_val = t_$1.m_someval; }

    // Copy Assignment [?]
    //
    $1& operator=(const $1& $1) { return *this; }

    // Move constructor [?]
    //
    $1& operator=($1&& other) noexcept { return *this; }

    // Move Assignment [?]
    //
    $1($1&&) = default;

    // Destructor [?]
    //
    ~$1() = default;
};
#endif /* $1_H */
endsnippet

snippet printvec "→ print vec" b
std::cout << "[ ";
for (const auto& i = ${1:vec}.begin(); i != $1.end(); ++i)
std::cout << *i << " ";
std::cout << "]" << std::endl;
endsnippet

snippet for "→ for loop" b
for (int ${1:i} = 0; $1 < ${2:container}; ++$1) {
}
endsnippet

snippet efor "→ for loop" b
for (const auto& ${1:i}: ${2:container}) {
}
endsnippet

snippet readint "→ std::cin int" w
int n;
std::cin >> n;
std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
endsnippet

snippet readstr "→ std::cin string" w
std::string str;
getline(std::cin, str);
endsnippet

snippet helloworld "→ template main.cpp" w
#include <glog/logging.h>
#include <gflags/gflags.h>

#include <iostream>
void initLogger(int& argc, char* argv[])
{
    google::ParseCommandLineFlags(&argc, &argv, true);
    google::InitGoogleLogging(argv[0]);
    google::SetLogDestination(google::GLOG_INFO, "Log.txt");
    LOG(INFO) << "Logger successfully initialized";
}

int main(int argc, char* argv[])
{
    initLogger(argc, argv);

    LOG(INFO) << "Hello world";
    std::cin.ignore();
    return 0;
}
endsnippet
